import React, {Component} from "react";
import {Button, Dropdown, Grid, Icon, Input} from "semantic-ui-react";
import {RendererControllerFactory} from "../controllers/RendererControllerFactory";
import {DimensionController} from "../controllers/DimensionController";
import {HotkeyClient} from "../clients/HotkeyClient";
import {FervieClient} from "../clients/FervieClient";

/**
 *  This view class is used to show a floating hotkey configuration window
 */
export default class InvitationKeyView extends Component {
  constructor(props) {
    super(props);

    this.state = {
      errorFeedback: "",
      successFeedback: "Enter the invitation key you received in email, to join the group from your account",
      currentInvitationKey: ""
    }

  }

  componentDidMount() {
    FervieClient.init(this);
  }


  onClickClose = () => {
    console.log("close window!");
    let viewController =
      RendererControllerFactory.getViewController(
        RendererControllerFactory.Views.INVITATION_KEY,
        this
      );

    viewController.closeInvitationKeyWindow();
  };

  /**
   * Handle pressing enter in the email box
   * @param e
   */
  handleKeyPressForInvitationCode = (e) => {
    if (e.charCode === 13) {
      if (this.isValidKeyCode(this.state.currentInvitationKey)) {
        FervieClient.useInvitationKey(this.state.currentInvitationKey, this, (arg) => {
          if (arg.error) {
            this.setState({
              errorFeedback: arg.error,
              successFeedback: ""
            });
          } else {
            this.setState({
              successFeedback: "Invitation key applied.  Please restart the application.",
              currentInvitationKey: ""
            });
          }
        });
      } else {
        this.setState({
          errorFeedback: "Invalid keycode",
          successFeedback: ""
        });
      }
    }
  };

  /**
   * handle changing the value of the email input box
   * @param e - the event that was generated by user gui event
   * @param value
   */
  handleChangeForInvitationCode = (e, { value }) => {
    this.setState({
      currentInvitationKey: value,
      errorFeedback: "",
      successFeedback: ""
    });
  };


  /**
   * Check if the keycode has the right number of characters
   * @param keycode
   * @returns {boolean}
   */
  isValidKeyCode(keycode) {
    return keycode.length === 32;
  }

  getInvitationKeyInput() {
    return (<div className="invitationKeyInput">
      <Input
        id="invitationKeyInput"
        fluid
        inverted
        autoFocus
        placeholder={"keycode"}
        value={this.state.currentInvitationKey}
        onKeyPress={this.handleKeyPressForInvitationCode}
        onChange={this.handleChangeForInvitationCode}

      />
    </div>);
  }


  /// renders the view into our root element of our window
  render() {

    let height = DimensionController.getHeightFor(
      DimensionController.Components.HOTKEY_CONFIG
    );

    return (
      <div id="component" className="invitationLayout">
        <div className="closeIcon">
          <Icon
            name="close"
            size="large"
            onClick={this.onClickClose}
          />
        </div>
        <div className="configBox"
           style={{
             height: height,
           }}>
          <div className="title">Use Invitation Key</div>

          {this.getInvitationKeyInput()}

          <div className="errorMessage">&nbsp;{this.state.errorFeedback}</div>
          <div className="successMessage">&nbsp;{this.state.successFeedback}</div>
        </div>
      </div>
    );
  }
}
