import React, {Component} from "react";
import {Input, Popup} from "semantic-ui-react";

export default class AccountContent extends Component {
  constructor(props) {
    super(props);

    this.state = {
      isEditingUsername : false,
      currentUsername: "@"+this.props.username,
      isFormVisible: false
    }
  }

  static usernameInputId = "usernameInput";

  componentDidMount() {
    setTimeout(() => {
        this.setState({isFormVisible: true});
      }, 500);
  }

  /**
   * gets the account content panel for the sidebar
   * @returns {*}
   */
  getAccountContent = () => {
    return (
      <div
        className="badgesContent"
        style={{
          height: 443,
        }}
      >
        <i>Check back later :)</i>
      </div>
    );
  };


  onStartEditing = () => {
    console.log("editing!");
    this.setState({
      isEditingUsername: true
    });
  }

  /**
   * Handles our editing of the fervie name
   * @param e - the event that was generated by user gui event
   * @param value
   */
  handleChangeForNameChange = (e, { value }) => {

    const regex = /^[a-zA-z0-9]*$/;

    if (!value.startsWith("@") || !regex.test(value.substr(1))) {
      return;
    }

    this.setState({
      currentUsername: value,
      successMessage: null,
      errorMessage: null
    });
  };

  /**
   * Handles blurring (cancelling) of our name change
   */
  handleNameChangeBlur = () => {

    console.log("BLUR!!");

    this.setState({
      isEditingUsername: false,
      currentUsername: "@" + this.props.username,
      successMessage: null,
      errorMessage: null
    });

    const el = document.getElementsByClassName(AccountContent.usernameInputId)[0];
    if (el) {
      el.classList.remove("focus");
    }

    this.props.handleGlobalHudInputUnlock();
  };


  /**
   * Handles blurring (cancelling) of our name change
   */
  handleNameChangeFocus = () => {
    console.log("FOCUS!!");

    this.props.handleGlobalHudInputLock();

    const el = document.getElementsByClassName(AccountContent.usernameInputId)[0];
    if (el) {
      el.classList.add("focus");
    }
  };


  /**
   * When we hit the enter key, should accept the new fervie name
   * @param e
   */
  handleKeyPressForNameChange = (e) => {
    if (e.charCode === 13) {
      this.props.onUpdateUsername(this.state.currentUsername.substr(1), this.handleUpdateUsernameResponse);
      this.setState({
        isEditingUsername: false
      });
    }
  };

  /**
   * Once the username change call goes through, this is called
   * with the api response object, so we can display the error or success message
   * @param arg
   */
  handleUpdateUsernameResponse = (arg) => {
    console.log("handleUpdateUsernameResponse");
    if (arg.data && arg.data.status === "SUCCESS") {
      this.setState({
        errorMessage: null,
        successMessage: arg.data.message
      });
    } else if (arg.error) {
      this.setState({
        errorMessage: arg.error,
        successMessage: null
      });
    }

  }


  /**
   * renders the moovie version of fervie title content
   * @returns {*}
   */
  getEditableUsername = () => {
    if (!this.state.isFormVisible) {
      return "";
    }
    return (<Input
      id={AccountContent.usernameInputId}
      className="usernameInput"
      label="Username"
      fluid
      inverted
      placeholder="Choose a unique username"
      value={this.state.currentUsername}
      onKeyPress={this.handleKeyPressForNameChange}
      onChange={this.handleChangeForNameChange}
      onBlur={this.handleNameChangeBlur}
      onFocus={this.handleNameChangeFocus}
      autoFocus
    />);
  };


  render() {
    return (
      <div className="accountContent">
       <div className="instruction"> Your username must be globally unique within the community</div>
      {this.getEditableUsername()}
        <div className="successMessage">{this.state.successMessage}</div>
        <div className="errorMessage">{this.state.errorMessage}</div>
      </div>);
  }
}
