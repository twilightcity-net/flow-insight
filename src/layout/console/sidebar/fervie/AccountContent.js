import React, {Component} from "react";
import {Input} from "semantic-ui-react";
import FeatureToggle from "../../../shared/FeatureToggle";

export default class AccountContent extends Component {
  constructor(props) {
    super(props);

    this.state = {
      currentUsername: "@"+this.props.username,
      currentFullName: this.props.fullName,
      currentDisplayName: this.props.displayName,
      isFormVisible: false,
      successMessage: null,
      errorMessage: null,
      fullNameSuccessMessage: null,
      fullNameErrorMessage: null,
      displayNameSuccessMessage: null,
      displayNameErrorMessage: null
    }
  }

  static usernameInputId = "usernameInput";
  static fullnameInputId = "fullnameInput";
  static displayNameInputId = "displayNameInput";

  componentDidMount() {
    setTimeout(() => {
        this.setState({isFormVisible: true});
      }, 500);
  }


  /**
   * Handles our editing of the username
   * @param e - the event that was generated by user gui event
   * @param value
   */
  handleChangeForNameChange = (e, { value }) => {

    const regex = /^[a-zA-z0-9]*$/;

    if (!value.startsWith("@") || !regex.test(value.substr(1))) {
      return;
    }

    this.setState({
      currentUsername: value,
      successMessage: null,
      errorMessage: null,
      fullNameSuccessMessage: null,
      fullNameErrorMessage: null,
      displayNameSuccessMessage: null,
      displayNameErrorMessage: null
    });
  };

  /**
   * Handles our editing of the full name
   * @param e - the event that was generated by user gui event
   * @param value
   */
  handleChangeForFullNameChange = (e, { value }) => {

    this.setState({
      currentFullName: value,
      successMessage: null,
      errorMessage: null,
      fullNameSuccessMessage: null,
      fullNameErrorMessage: null,
      displayNameSuccessMessage: null,
      displayNameErrorMessage: null
    });
  };

  /**
   * Handles our editing of the display name
   * @param e - the event that was generated by user gui event
   * @param value
   */
  handleChangeForDisplayNameChange = (e, { value }) => {

    this.setState({
      currentDisplayName: value,
      successMessage: null,
      errorMessage: null,
      fullNameSuccessMessage: null,
      fullNameErrorMessage: null,
      displayNameSuccessMessage: null,
      displayNameErrorMessage: null
    });
  };

  /**
   * Handles blurring (cancelling) of our username change
   */
  handleNameChangeBlur = () => {
    this.setState({
      currentUsername: "@" + this.props.username,
      successMessage: null,
      errorMessage: null,
      fullNameSuccessMessage: null,
      fullNameErrorMessage: null,
      displayNameSuccessMessage: null,
      displayNameErrorMessage: null
    });

    const el = document.getElementsByClassName(AccountContent.usernameInputId)[0];
    if (el) {
      el.classList.remove("focus");
    }

    this.props.handleGlobalHudInputUnlock();
  };


  /**
   * Handles blurring (cancelling) of our full name change
   */
  handleFullNameChangeBlur = () => {

    this.setState({
      currentFullName: this.props.fullName,
      successMessage: null,
      errorMessage: null,
      fullNameSuccessMessage: null,
      fullNameErrorMessage: null,
      displayNameSuccessMessage: null,
      displayNameErrorMessage: null
    });

    const el = document.getElementsByClassName(AccountContent.fullnameInputId)[0];
    if (el) {
      el.classList.remove("focus");
    }

    this.props.handleGlobalHudInputUnlock();
  };

  /**
   * Handles blurring (cancelling) of our display name change
   */
  handleDisplayNameChangeBlur = () => {

    this.setState({
      currentDisplayName: this.props.displayName,
      successMessage: null,
      errorMessage: null,
      fullNameSuccessMessage: null,
      fullNameErrorMessage: null,
      displayNameSuccessMessage: null,
      displayNameErrorMessage: null
    });

    const el = document.getElementsByClassName(AccountContent.displayNameInputId)[0];
    if (el) {
      el.classList.remove("focus");
    }

    this.props.handleGlobalHudInputUnlock();
  };



  /**
   * Handles focus of our username field
   */
  handleNameChangeFocus = () => {
    this.props.handleGlobalHudInputLock();

    const el = document.getElementsByClassName(AccountContent.usernameInputId)[0];
    if (el) {
      el.classList.add("focus");
    }
  };

  /**
   * Handles focus of our full name field
   */
  handleFullNameChangeFocus = () => {
    this.props.handleGlobalHudInputLock();

    const el = document.getElementsByClassName(AccountContent.fullnameInputId)[0];
    if (el) {
      el.classList.add("focus");
    }
  };

  /**
   * Handles focus of our display name field
   */
  handleDisplayNameChangeFocus = () => {
    this.props.handleGlobalHudInputLock();

    const el = document.getElementsByClassName(AccountContent.displayNameInputId)[0];
    if (el) {
      el.classList.add("focus");
    }
  };

  /**
   * When we hit the enter key, should accept the new fervie name
   * @param e
   */
  handleKeyPressForNameChange = (e) => {
    if (e.charCode === 13) {
      this.props.onUpdateUsername(this.state.currentUsername.substr(1), this.handleUpdateUsernameResponse);
    }
  };

  /**
   * When we hit the enter key, should accept the new fervie name
   * @param e
   */
  handleKeyPressForFullNameChange = (e) => {
    if (e.charCode === 13) {
      this.props.onUpdateFullName(this.state.currentFullName, this.handleUpdateFullNameResponse);
    }
  };

  /**
   * When we hit the enter key, should accept the new fervie name
   * @param e
   */
  handleKeyPressForDisplayNameChange = (e) => {
    if (e.charCode === 13) {
      this.props.onUpdateDisplayName(this.state.currentDisplayName, this.handleUpdateDisplayNameResponse);
    }
  };

  /**
   * Once the username change call goes through, this is called
   * with the api response object, so we can display the error or success message
   * @param arg
   */
  handleUpdateUsernameResponse = (arg) => {
    console.log("handleUpdateUsernameResponse");
    if (arg.data && arg.data.status === "SUCCESS") {
      this.setState({
        errorMessage: null,
        successMessage: arg.data.message
      });
    } else if (arg.error) {
      this.setState({
        errorMessage: arg.error,
        successMessage: null
      });
    }
  }

  /**
   * Once the fullName change call goes through, this is called
   * with the api response object, so we can display the error or success message
   * @param arg
   */
  handleUpdateFullNameResponse = (arg) => {
    console.log("handleUpdateFullNameResponse");
    if (arg.data && arg.data.status === "SUCCESS") {
      this.setState({
        fullNameErrorMessage: null,
        fullNameSuccessMessage: arg.data.message
      });
    } else if (arg.error) {
      this.setState({
        fullNameErrorMessage: arg.error,
        fullNameSuccessMessage: null
      });
    }
  }

  /**
   * Once the displayName change call goes through, this is called
   * with the api response object, so we can display the error or success message
   * @param arg
   */
  handleUpdateDisplayNameResponse = (arg) => {
    console.log("handleUpdateDisplayNameResponse");
    if (arg.data && arg.data.status === "SUCCESS") {
      this.setState({
        displayNameErrorMessage: null,
        displayNameSuccessMessage: arg.data.message
      });
    } else if (arg.error) {
      this.setState({
        displayNameErrorMessage: arg.error,
        displayNameSuccessMessage: null
      });
    }
  }

  /**
   * renders the editable fullname input
   * @returns {*}
   */
  getEditableFullName = () => {
    if (!this.state.isFormVisible) {
      return "";
    }
    return (<Input
      id={AccountContent.fullnameInputId}
      className="fullnameInput"
      label="Full Name"
      fluid
      inverted
      placeholder="Your full name"
      value={this.state.currentFullName}
      onKeyPress={this.handleKeyPressForFullNameChange}
      onChange={this.handleChangeForFullNameChange}
      onBlur={this.handleFullNameChangeBlur}
      onFocus={this.handleFullNameChangeFocus}
    />);
  };

  /**
   * renders the editable displayname input
   * @returns {*}
   */
  getEditableDisplayName = () => {
    if (!this.state.isFormVisible) {
      return "";
    }
    return (<Input
      id={AccountContent.displayNameInputId}
      className="displayNameInput"
      label="Display"
      fluid
      inverted
      placeholder="Short name for display"
      value={this.state.currentDisplayName}
      onKeyPress={this.handleKeyPressForDisplayNameChange}
      onChange={this.handleChangeForDisplayNameChange}
      onBlur={this.handleDisplayNameChangeBlur}
      onFocus={this.handleDisplayNameChangeFocus}
    />);
  };


  /**
   * renders the editable username input
   * @returns {*}
   */
  getEditableUsername = () => {
    if (!this.state.isFormVisible) {
      return "";
    }
    return (<Input
      id={AccountContent.usernameInputId}
      className="usernameInput"
      label="Username"
      fluid
      inverted
      placeholder="Choose a unique username"
      value={this.state.currentUsername}
      onKeyPress={this.handleKeyPressForNameChange}
      onChange={this.handleChangeForNameChange}
      onBlur={this.handleNameChangeBlur}
      onFocus={this.handleNameChangeFocus}
      autoFocus
    />);
  };


  render() {
    let org = "organization";
    if (FeatureToggle.isMoovieApp()) {
      org = "community";
    }

    let fullNameField = "";
    let displayNameField = "";
    if (!FeatureToggle.isMoovieApp()) {
      fullNameField = (
        <span>
          {this.getEditableFullName()}
          <div className="successMessage">{this.state.fullNameSuccessMessage}</div>
          <div className="errorMessage">{this.state.fullNameErrorMessage}</div>
        </span>);
    }

    if (!FeatureToggle.isMoovieApp()) {
      displayNameField = (
        <span>
          {this.getEditableDisplayName()}
          <div className="successMessage">{this.state.displayNameSuccessMessage}</div>
          <div className="errorMessage">{this.state.displayNameErrorMessage}</div>
        </span>);
    }

    return (
      <div className="accountContent">
        <div className="instruction"> Your username must be globally unique within the {org}</div>
        {this.getEditableUsername()}
        <div className="successMessage">{this.state.successMessage}</div>
        <div className="errorMessage">{this.state.errorMessage}</div>
        {fullNameField}
        {displayNameField}
      </div>);
  }
}
